% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gf_model_old.R
\name{gf_model_old}
\alias{gf_model_old}
\title{Old version of \code{\link[=gf_model]{gf_model()}}}
\usage{
gf_model_old(
  object = NULL,
  gformula = NULL,
  data = NULL,
  model = NULL,
  width = 0.3,
  ...
)
}
\arguments{
\item{object}{When chaining, this holds an object produced in the earlier portions of the chain.
Most users can safely ignore this argument. See details and examples.}

\item{gformula}{A formula with shape y ~ x. Superseded by \code{model} if one is given.}

\item{data}{A data frame with the variables to be plotted. Superseded by \code{model} if one is given.}

\item{model}{A model fit by \code{\link[=lm]{lm()}}. If a model is given, it supersedes the \code{data} and
\code{gformula}.}

\item{width}{The width of the mean line(s) to be plotted for group models. Note that factors are
plotted 1 unit apart, so values larger than 1 will overlap into other groups.}

\item{...}{Arguments passed on to the respective \verb{gf_*} function.}
}
\value{
A \code{gg} object
}
\description{
When teaching about regression it can be useful to visualize the data as a point plot with the
outcome on the y-axis and the explanatory variable on the x-axis. For regression models, this is
most easily achieved by calling \code{\link[=gf_lm]{gf_lm()}}, with empty models \code{\link[=gf_hline]{gf_hline()}} using the mean, and
a more complicated call to \code{\link[=gf_segment]{gf_segment()}} for group models. This function simplifies this by
making a guess about what kind of model you are plotting (empty/null, regression, group) and then
making the appropriate plot layer for it. \strong{Note}: this function only works with models that
have a \emph{single} or \code{NULL} explanatory variable, and it will not work with multiple regression.
}
\examples{
# basic examples
gf_model_old(Thumb ~ NULL, data = Fingers)
gf_model_old(Thumb ~ Height, data = Fingers)
gf_model_old(Thumb ~ RaceEthnic, data = Fingers)

# specifying the model using a fitted model
model <- lm(Thumb ~ Height, data = Fingers)
gf_model_old(model)

# chaining on to previous plots
gf_point(Thumb ~ Height, data = Fingers) \%>\%
  gf_model_old()

gf_point(Thumb ~ Height, data = Fingers) \%>\%
  gf_model_old() \%>\%
  gf_model_old(Thumb ~ NULL)
}
